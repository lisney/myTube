1. 리액트 설치
npm i -g create-react-app

2. 리액트 프로젝트 생성
create-react-app.cmd <프로젝트 폴더명> --scripts-version 2.0.3 //.cmd 보안에러시 붙임, class 버전 설치

3.깃허브에 저장
소스컨트롤 탭 > +버튼을 눌러 모두 추가해 준다 > 커밋 메시지를 입력 후 >체크 버튼을 눌러 커밋한다
터미널에서 깃허브에서 생성한 주소를 리모트 주소로 설정한다
git remote add origin <깃 주소>
git push origin master

4.자바스크립트에서 Emmet 사용하기
Ctrl +, > WorkSpace setting > Include Languages > setting.json 편집
{
   "emmet.includeLanguages": {
      "javascript": "javascriptreact"
   }
}
추가

5. props
::컴포넌트
        <div>
            <h2>{this.props.name}</h2>
            <p>{this.props.birthday}</p>
            <p>{this.props.gender}</p>
            <p>{this.props.job}</p>
        </div>
:: 불러옴 import Customer from './components/Customer.js'
const customer ={'name':'...', 'birthday':'...'
<Customer name={customer.name} birthday={customer.birthday}...

6.컴포넌트 구조화
## https://placeimg.com/64/64/any  //랜덤으로 이미지 보여주는 사이트
$$ VScode 에서는 Ctrl 키를 누른 상태에서 컴포넌트 명을 클릭하면 해당 컴포넌트로 바로 이동한다

6.map 매소드 사용 배열 반복처리
>>map() 함수는 각 배열의 요소를 돌면서 인자로 전달된 함수를 사용하여 처리 된 새로운 결과를 새로운 배열에 담아 반환하는 함수입니다.

const numbers = [1, 2, 3, 4, 5];
const result = numbers.map((num) => num *2);
console.log(result);

>>Component 배열로 map하기
class MyComponent extends Component
{    
    render(){
        return(
            <ul>
                <li>Menu1</li>
                <li>Menu2</li>
                <li>Menu3</li>
                <li>Menu4</li>
            </ul>
        )
    };
}
를 다음과 같이 바꿀 수 있다.
class MyComponent extends Component
{    
    render(){

        const menus = ["Menu1", "Menu2", "Menu3", "Menu4"]
        const menuList = menus.map((menu, index) => (<li key={index}>{menu}</li>));

        return(
            <ul>
                {menuList}
            </ul>
        )
    };
}
//{}안에 배열 객체 이름을 작성합니다.
//리액트(React)에서 key는 컴포넌트를 렌더링 하였을 때 어떤 원소가 변경되었는지 빠르게 감지하기 위해 사용됩니다.
 만약 key가 설정되지 않았다면 가상 DOM을 순차적으로 비교하면서 감지하기 때문에 key가 없을때보다 속도가 느립니다.

7.Material UI
material-ui.com
>> 설치
npm i @material-ui/core

##create-react-app 생성 안될 때
yarn cache clean

////////////////////////////////////////////
npm init은 package.json을 만드는 명령어였죠? 새로운 프로젝트나 패키지를 만들 때 사용합니다.

npm root는 node_modules의 위치를 알려줍니다.

npm ls는 패키지를 조회하는 명령어입니다.

npm adduser은 npm에 회원가입하는 명령어입니다. 로그인도 됩니다. npm login도 똑같은 역할을 합니다.

npm logout은 반대로 logout할 때 사용합니다.

npm publish는 패키지를 직접 출시하거나 버전 업그레이드를 할 때 사용하는 명령어입니다. .gitignore또는 .npmignore 파일에 적혀있지 않은 파일들은 npm 저장소에 업로드되어 출시됩니다.

npm deprecate는 이미 낸 패키지를 사용하지 않도록 권고하는 명령어입니다. 자신이 어떤 버전을 출시했는데 치명적인 버그가 있다면 이 명령어를 사용해서 다른 사람들에게 사용하지 말도록 말해줍시다.

npm version은 버전 업데이트를 할 때 사용합니다. 새로운 버전이 나왔다면 npm version [버전]하면 됩니다.

npm start은 package.json의 scripts에 있는 start 명령어를 실행하는 부분입니다. 만약 start 명령어를 따로 설정하지 않았다면 node server.js가 실행됩니다.

npm cache는 npm 내의 cache를 보여줍니다. 만약 npm에 문제가 생기거나 하면 제일 먼저 하는 게 npm cache clean으로 cache를 지우는 겁니다.

npm rebuild는 npm을 다시 설치하는 명령어입니다. 에러가 발생했을 시 주로 npm cache clean을 한 후 이 명령어를 쳐서 재설치해봅니다.

npm config는 npm의 설정을 조작하는 명령어입니다. npm config list 하면 현재 설정들을 볼 수 있고, npm set [이름] [값], npm get [이름]으로 속성을 설정하거나 조회할 수 있습니다.




